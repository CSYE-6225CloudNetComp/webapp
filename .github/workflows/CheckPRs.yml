name: Node.js CI with PostgreSQL Setup

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Run Node.js CI with PostgreSQL Setup
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib

      - name: Set up PostgreSQL
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE USER \"$DB_USER\" WITH PASSWORD '$DB_PASSWORD';"
          sudo -u postgres psql -c "CREATE DATABASE \"$DB_NAME\";"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE \"$DB_NAME\" TO \"$DB_USER\";"

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p ${{ secrets.DB_PORT }}; do sleep 1; done
          echo "PostgreSQL is ready."

      - name: Set environment variables for the application
        run: |
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV

      - name: Debug environment variables
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}"
          echo "DB_PORT=${{ secrets.DB_PORT }}"
          echo "DB_USER=${{ secrets.DB_USER }}"
          echo "DB_NAME=${{ secrets.DB_NAME }}"

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          PORT: ${{ secrets.PORT }}
        run: npm test --runInBand --detectOpenHandles
