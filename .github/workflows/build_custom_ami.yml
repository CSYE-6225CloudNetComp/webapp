name: Build and Deploy Custom Image on PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  build_and_test:
    name: Zip and Upload Web Application & Create Custom AMI
    if: github.event.pull_request.merged == true  # Run only if the PR was merged
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code
    - name: Check out code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js version
    - name: Set up Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: "16"
 
    - name: Zip application code
      run: |
        zip -r webapp.zip .

    # Step 3: Install dependencies
    - name: Install dependencies
      run: npm install

    # Step 4: Install PostgreSQL
    - name: Install PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql postgresql-contrib

    # Step 5: Set up PostgreSQL (create user, database, and grant privileges)
    - name: Set up PostgreSQL
      env:
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
      run: |
        sudo service postgresql start
        sudo -u postgres psql -c "CREATE USER \"$DB_USER\" WITH PASSWORD '$DB_PASSWORD';"
        sudo -u postgres psql -c "CREATE DATABASE \"$DB_NAME\";"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE \"$DB_NAME\" TO \"$DB_USER\";"

    # Step 6: Set up the environment fil
    - name: Setup Environment File
      run: |
        cat << EOF > .env
        DB_USER=${{ secrets.DB_USER }}
        DB_HOST=${{ secrets.DB_HOST }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_PORT=${{ secrets.DB_PORT }}
        PORT=${{ secrets.PORT }}
        EOF
        
      shell: bash

    # Step 7: Check if environment file exists
    - name: Check if environment file exists
      run: ls -l ./.env

    # Step 8: Show environment file content
    - name: Show environment file content
      run: cat .env

    
    - name: Upload webapp artifact
      uses: actions/upload-artifact@v3
      with:
        name: webapp.zip
        path: webapp.zip

    # Step 11: Install Packer
    - name: Install Packer
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install -y packer

    # Step 12: AWS configure
    - name: Configure AWS dev profile credentials
      env:
        AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
      if: env.AWS_PROFILE == 'dev' 
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      
    - name: Configure AWS dev profile credentials
      env:
        AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
      if: env.AWS_PROFILE == 'demo'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWSdemo_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWSdemo_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 13: Initialize Packer
    - name: Initialize Packer
      run: |
        packer init ./packer/aws.pkr.hcl

    # Step 14: Build Custom Image with Packer
    - name: Build Custom Image
      env:
        AWS_VPC_ID: ${{ secrets.AWS_VPC_ID }}
        AWS_SUBNET_ID: ${{ secrets.AWS_SUBNET_ID }}
        AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_INSTANCE_TYPE: ${{ secrets.AWS_INSTANCE_TYPE }}
        AWS_SOURCE_AMI: ${{ secrets.AWS_SOURCE_AMI }}
        VOLUME_SIZE: ${{ secrets.VOLUME_SIZE }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DEMO_USER: ${{ secrets.DEMO_USER }}
        DEV_USER: ${{secrets.DEV_USER}}


      run: |
        packer build -var "aws_vpc_id=${AWS_VPC_ID}" \
                     -var "aws_subnet_id=${AWS_SUBNET_ID}" \
                     -var "aws_profile=${AWS_PROFILE}" \
                     -var "aws_region=${AWS_REGION}" \
                     -var "aws_instance_type=${AWS_INSTANCE_TYPE}" \
                     -var "aws_source_ami=${AWS_SOURCE_AMI}" \
                     -var "volume_size=${VOLUME_SIZE}" \
                     -var "DB_USER=${DB_USER}" \
                     -var "DB_PASSWORD=${DB_PASSWORD}" \
                     -var "DB_NAME=${DB_NAME}" \
                     -var "DB_PORT=${DB_PORT}" \
                     -var "aws_demo_user=${DEMO_USER}" \
                     -var "aws_dev_user=${DEV_USER}" \
                     ./packer/aws.pkr.hcl 

    - name: Update Launch Template
      run: |
        
        asg_name=$(aws autoscaling describe-auto-scaling-groups \
          --query "AutoScalingGroups | sort_by(@, &AutoScalingGroupARN)[-1].AutoScalingGroupName" \
          --output text)
        echo "Latest Auto Scaling Group Name: $asg_name"

        launch_template_id=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $asg_name \
          --query "AutoScalingGroups[0].LaunchTemplate.LaunchTemplateId" \
          --output text)
        echo "Launch Template ID: $launch_template_id"

        # Get the latest AMI ID
        latest_ami=$(aws ec2 describe-images \
          --executable-users self \
          --filters "Name=state,Values=available" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" \
          --query "reverse(sort_by(Images, &CreationDate))[0].ImageId" --output text)
        echo "Latest AMI ID: $latest_ami"

        # Get the current latest launch template version
        latest_version=$(aws ec2 describe-launch-template-versions \
          --launch-template-id $launch_template_id \
          --query 'LaunchTemplateVersions[-1].VersionNumber' --output text)
        echo "Current Latest Launch Template Version: $latest_version"

        # Create a new launch template version with the latest AMI
        aws ec2 create-launch-template-version \
          --launch-template-id $launch_template_id \
          --source-version $latest_version \
          --launch-template-data '{"ImageId":"'"$latest_ami"'"}'

        # Get the new latest version number directly
        new_version=$(aws ec2 describe-launch-templates \
          --launch-template-ids $launch_template_id \
          --query 'LaunchTemplates[0].LatestVersionNumber' --output text)
        echo "New Launch Template Version: $new_version"

        # Explicitly set the new version as the default
        aws ec2 modify-launch-template \
          --launch-template-id $launch_template_id \
          --default-version $new_version
        echo "Updated default launch template version to: $new_version"

        # Update the Auto Scaling Group to use the new version
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $asg_name \
          --launch-template "LaunchTemplateId=$launch_template_id,Version=$new_version"
        echo "Updated Auto Scaling Group with Launch Template Version: $new_version"



        
    - name: Refresh Auto Scaling Group
      run: |
        # Start instance refresh for the Auto Scaling Group
        refresh_id=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name terraform-20241120032933702700000008 \
          --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
          --query 'InstanceRefreshId' --output text)
        echo "Instance Refresh ID: $refresh_id"

        # Monitor the instance refresh status
        while true; do
          refresh_status=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name terraform-20241120032933702700000008 \
            --query "InstanceRefreshes[?InstanceRefreshId=='$refresh_id'].Status" \
            --output text)
          echo "Instance Refresh Status: $refresh_status"

          if [ "$refresh_status" == "Successful" ]; then
            echo "Instance refresh completed successfully."
            break
          elif [ "$refresh_status" == "Failed" ]; then
            echo "Instance refresh failed."
            exit 1
          elif [ "$refresh_status" == "Cancelled" ]; then
            echo "Instance refresh was cancelled."
            exit 1
          else
            echo "Instance refresh in progress. Waiting..."
            sleep 30
          fi
        done

     