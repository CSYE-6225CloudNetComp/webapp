name: Build and Deploy Custom Image on PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  build_and_test:
    name: Zip and Upload Web Application & Create Custom AMI
    if: github.event.pull_request.merged == true  # Run only if the PR was merged
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code
    - name: Check out code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js version
    - name: Set up Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: "16"
 
    - name: Zip application code
      run: |
        zip -r webapp.zip .

    # Step 3: Install dependencies
    - name: Install dependencies
      run: npm install

    # Step 4: Install PostgreSQL
    - name: Install PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql postgresql-contrib

    # Step 5: Set up PostgreSQL (create user, database, and grant privileges)
    - name: Set up PostgreSQL
      env:
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
      run: |
        sudo service postgresql start
        sudo -u postgres psql -c "CREATE USER \"$DB_USER\" WITH PASSWORD '$DB_PASSWORD';"
        sudo -u postgres psql -c "CREATE DATABASE \"$DB_NAME\";"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE \"$DB_NAME\" TO \"$DB_USER\";"

    # Step 6: Set up the environment file
    - name: Setup Environment File
      run: |
        cat << EOF > .env
        DB_USER=${{ secrets.DB_USER }}
        DB_HOST=${{ secrets.DB_HOST }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_PORT=${{ secrets.DB_PORT }}
        PORT=${{ secrets.PORT }}
        EOF
      shell: bash

    # Step 7: Check if environment file exists
    - name: Check if environment file exists
      run: ls -l ./.env

    # Step 8: Show environment file content
    - name: Show environment file content
      run: cat .env

    # Step 9: Run tests
    - name: Run tests
      env:
        DB_HOST: localhost
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PORT: ${{ secrets.DB_PORT }}
        PORT: ${{ secrets.PORT }}
      run: npm test


    #
    - name: Upload webapp artifact
      uses: actions/upload-artifact@v3
      with:
        name: webapp.zip
        path: webapp.zip

    # Step 11: Install Packer
    - name: Install Packer
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install -y packer

    # Step 12: AWS configure
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 13: Initialize Packer
    - name: Initialize Packer
      run: |
        packer init ./packer/aws.pkr.hcl

    # Step 14: Build Custom Image with Packer
    - name: Build Custom Image
      env:
        AWS_VPC_ID: ${{ secrets.AWS_VPC_ID }}
        AWS_SUBNET_ID: ${{ secrets.AWS_SUBNET_ID }}
        AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_INSTANCE_TYPE: ${{ secrets.AWS_INSTANCE_TYPE }}
        AWS_SOURCE_AMI: ${{ secrets.AWS_SOURCE_AMI }}
        VOLUME_SIZE: ${{ secrets.VOLUME_SIZE }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        packer build -var "aws_vpc_id=${AWS_VPC_ID}" \
                     -var "aws_subnet_id=${AWS_SUBNET_ID}" \
                     -var "aws_profile=${AWS_PROFILE}" \
                     -var "aws_region=${AWS_REGION}" \
                     -var "aws_instance_type=${AWS_INSTANCE_TYPE}" \
                     -var "aws_source_ami=${AWS_SOURCE_AMI}" \
                     -var "volume_size=${VOLUME_SIZE}" \
                     -var "DB_USER=${DB_USER}" \
                     -var "DB_PASSWORD=${DB_PASSWORD}" \
                     -var "DB_NAME=${DB_NAME}" \
                     -var "DB_PORT=${DB_PORT}" \
                     ./packer/aws.pkr.hcl
